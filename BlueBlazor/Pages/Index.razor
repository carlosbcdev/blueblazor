@page "/"
@inject WebBluetoothControllerService __WebBluetooth

<div>
    @if (isAvailable.HasValue)
    {
        if (isAvailable == true)
        {
            <button @onclick="connect">Connect</button>
            <button @onclick="disconnect">Disconnect</button>

            <br />

            @if (connectedDevice != null)
            {
                <span>@connectedDevice.Id</span>

                <br />

                <span>@connectedDevice.Name</span>
            }
        }
        else
        {
            <b>Bluetooth not available!</b>
        }
    }
    else
    {
        <i>Loading Bluetooth...</i>
    }
</div>

@code {
    private bool? isAvailable = null;
    private Device connectedDevice;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            isAvailable = await __WebBluetooth.IsAvailableAsync();
            StateHasChanged();
        }
    }

    private async Task connect()
    {
        connectedDevice = await __WebBluetooth.RequestDeviceAsync(new RequestDeviceQuery()
            {
                Filters = new List<Filter> {
                new Filter() {
                    Services = new List<string> {
                        "<<SERVICE_ID_OR_NAME>>"
                    }
                }
            }
            });
        StateHasChanged();
    }
    private async Task disconnect()
    {
        if (connectedDevice == null) return;
        await __WebBluetooth.DisconnectAsync(connectedDevice);
    }
}